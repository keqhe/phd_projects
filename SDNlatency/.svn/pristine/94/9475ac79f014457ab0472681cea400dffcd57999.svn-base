\section{Related Work}
\label{sec:related}
% Recently there has been several publications that attempt to characterize the
% performance of commercially available Openflow switches and proposed solutions
% to circumvent these performance issues. In the context of the work presented
% here we survey prior work on performance studies of commercial switches and
% from a solution perspective we provide the context for two solutions: Rule
% offloading and Multipath routing. 

A few prior studies have considered SDN switch performance. However, 
they either focus on narrow issues, do not offer
sufficient in-depth explanations for observed performance issues, or do
not explore implications on applications that require tight
control of latency.  Devoflow~\cite{devoflow} showed that the rate of statistics
gathering is limited by the size of the flow table and that statistics
gathering negatively impacts flow setup rate.  More recently, two
studies~\cite{oflops,ucsdpaper} provided a more in-depth look into
switch performance across various vendors.  In~\cite{oflops}, the
authors evaluate 3 commercial switches and observed that switching
performance is vendor specific and depends on applied operations and firmware. In ~\cite{ucsdpaper}, the
authors also studied 3 commercial switches (HP Procurve, Fulcrum,
Quanta) and found that delay distributions were distinct, mainly due
to variable control delays.  Our work is complementary with, and more
general, than these results. 
%We provide in-depth characterization of the impact of
%different factors (e.g., rule priority, complexity and table occupancy). 
%We also provide
%low-level explanations of the latency causes.
Some studies have considered approaches to mitigate the overhead of SDN
rule matching and processing. 
DevoFlow~\cite{devoflow} presents
a rule cloning solution which reduces the number of controller
requests being made by the switch by having the controller set up
rules on aggregate or elephant flows. 
% A clone flag is used to indicate if the flow rule should remain
               % as an aggregate in the flow table or 
% if it needs to be split into microflows. The ability to split into microflows
% allows greater visibility into  
% these flows from a management perspective while at the same time reducing the
% number of rule set up requests to the controller. The action part of the flow
% table in the switch can also implement explicit multipath routing and rapid
% rerouting by manipulating the  
% rule priorities within the switch. These proposed solutions were evaluated
% using simulation studies and show some promise but requires modifications to
% current switch operations. Our measurement study suggests that the
% implementation of these approaches on  
% current switches especially the use of priorities may further impact switch performance. 
DIFANE \cite{difane} reduces flow set up latency by splitting
pre-installed wild card rules among multiple switches and therefore
all decisions are still made in the data plane.  
Lastly, Dionysus~\cite{dionysus} optimally schedules a set of rule updates 
while maintaining desirable consistency properties (e.g., no loops and no
blackholes).
%Dionysus assumes the target network state is given, while Mazu
%computes a target network state that spreads rule updates among more switches
%in order to increase parallelism. Thus, we believe that Dionysus and Mazu are
%complementary.

% LocalWords:  SDN Devoflow Procurve Mazu's DIFANE pre hypervisors hypervisor
