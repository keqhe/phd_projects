\section{Implementation}
\label{impl}

Need FACK, PACK packet format.

Standard OVS kernel datapath LoC: 2360
\acdc{} kernel datapath LoC: 3590



\tightparagraph{Little CPU and memory overhead}
In our implementation, first we leverage the Read-Copy-Update (RCU)~\cite{guniguntala2008read} enabled hash tables
to keep per-flow states (such as ``snd\_una'' and ``snd\_nxt''). RCU technique is also employed by
Open vSwitch's kernel datapath and it helps improve processing speed for ``read-heavy''
workloads (\ie{}, inserting new flows is much less frequent than looking-up existing flows) on
shared-memory multiprocessor systems.
Second, \acdc{} processes on ``segment'' level instead of ``packet'' level due to
NIC offloading features (TSO at the sender side and GRO/LRO at the receiver side).
Third, we also leverage the NIC checksumming offloading feature such that
we do not need to compute checksums after we change TCP/IP header fields.
Our microbenchmarks (\cref{micro}) show that \acdc{} incurs very little additional CPU overhead (less than 4\%) to
support 10Gbps line-rate, even it is fully implemented in software.
We are currently implementing \acdc{} on Cavium's programmable NICs~\cite{cavium-nic},
where we can entirely offload the computational overhead to hardware. Therefore, we believe
\acdc{} can support even higher line rates (\eg{}, 40Gbps).
In our implementation, each TCP connection takes 320 bytes in the hash tables,
so it takes around 3.2MB even there are 10K concurrent connections.
